MicroprogramSequencer.cpp:	if (microinstruction->LMS)
MicroprogramSequencer.cpp:	if (microinstruction->RMS && !microinstruction->EFL) // @Ghosh : Unconditional reset, if EFL == false;
MicroprogramSequencer.cpp:	if (microinstruction->RMS && microinstruction->EFL) // @Ghosh : Conditional reset, if flag is enabled;
MicroprogramSequencer.cpp:	if (microinstruction->LMS)
MicroprogramSequencer.cpp:	if (microinstruction->RMS && !microinstruction->EFL) // @Ghosh : Unconditional reset, if EFL == false;
MicroprogramSequencer.cpp:	if (microinstruction->RMS && microinstruction->EFL) // @Ghosh : Conditional reset, if flag is enabled;
ALU.cpp:	switch ((microinstruction->SAF) & 0x0F) {
RegisterArray.cpp:	if (microinstruction->ERG) {
RegisterArray.cpp:	if (microinstruction->LRG) {
RegisterArray.cpp:	if (microinstruction->ERG) {
RegisterArray.cpp:	if (microinstruction->LRG) {
ROM.cpp:	microinstruction->setContent(this->hashTable[ microprogramSequencer->getContent() ]);
Instruction.cpp:	if (microinstruction->LIR)
Instruction.cpp:	if (microinstruction->LIR)
Flag.cpp:	if (microinstruction->EFL)
Flag.cpp:		microinstruction->RMS = true; // @Ghosh : This will reset MS when Flag is not 0, according to logic defined in <MS>.cpp
Flag.cpp:	if (microinstruction->EFL)
Flag.cpp:		microinstruction->RMS = true; // @Ghosh : This will reset MS when Flag is not 0, according to logic defined in <MS>.cpp
ProgramCounter.cpp:	if (microinstruction->EPC)
ProgramCounter.cpp:	if (microinstruction->IPC)
ProgramCounter.cpp:	if (microinstruction->LPC)
ProgramCounter.cpp:	if (microinstruction->EPC)
ProgramCounter.cpp:	if (microinstruction->IPC)
ProgramCounter.cpp:	if (microinstruction->LPC)
MemoryAddress.cpp:	if (microinstruction->LMR)
MemoryAddress.cpp:	if (microinstruction->LMR)
Operand.cpp:	if (microinstruction->EOR)
Operand.cpp:	if (microinstruction->ROR)
Operand.cpp:	if (microinstruction->LOR)
Operand.cpp:	if (microinstruction->EOR)
Operand.cpp:	if (microinstruction->ROR)
Operand.cpp:	if (microinstruction->LOR)
StackPointer.cpp:	if (microinstruction->ESP)
StackPointer.cpp:	if (microinstruction->ISP)
StackPointer.cpp:	if (microinstruction->DSP)
StackPointer.cpp:	if (microinstruction->LSP)
StackPointer.cpp:	if (microinstruction->ESP)
StackPointer.cpp:	if (microinstruction->ISP)
StackPointer.cpp:	if (microinstruction->DSP)
StackPointer.cpp:	if (microinstruction->LSP)
MainMemory.cpp:	if(microinstruction->RD)
MainMemory.cpp:	if(microinstruction->WR)
main.cpp:		std::cout <<"EPC : "<<microinstruction->EPC<<std::endl;
main.cpp:		std::cout <<"LMR : "<<microinstruction->LMR<<std::endl;
main.cpp:		std::cout <<"IPC : "<<microinstruction->IPC<<std::endl;
main.cpp:		std::cout <<"LIO : "<<microinstruction->LIO<<std::endl;
main.cpp:	//	microinstruction->LIO = true;
main.cpp:	//	microinstruction->LIO = true;
main.cpp:	//	microinstruction->SAF = 1;
main.cpp:	//	microinstruction->SAF = 1;
main.cpp:	//	std::cout <<(microinstruction->SAF & 15)<<std::endl;
Accumulator.cpp:	if (microinstruction->EAR)
Accumulator.cpp:	if (microinstruction->RAR)
Accumulator.cpp:	if (microinstruction->LAR)
Accumulator.cpp:	if(microinstruction->EAR)
Accumulator.cpp:	if (microinstruction->RAR)
Accumulator.cpp:	if (microinstruction->LAR)
IORF.cpp:	if (microinstruction->LIO) {
IORF.cpp:	if (microinstruction->LIO) {
